import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import BotCommand
from aiogram.types import Message
from dotenv import load_dotenv

logging.basicConfig(
    level=logging.INFO,
    format="%(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler(),
    ],
)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if BOT_TOKEN is None:
    logger.error("BOT_TOKEN is not set in the environment variables.")
    raise ValueError("BOT_TOKEN is not set in the environment variables.")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

commands = [
    BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
    BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
]


class Form(StatesGroup):
    waiting_for_fio = State()
    waiting_for_photo = State()


@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer_sticker("CAACAgIAAxkBAAIRlWe8zRPhoaoD08dIOYbDrmPhmV55AAJdWwACS9bJSiTwphdkogdfNgQ")
    await asyncio.sleep(0.7)
    await message.answer("–ü—Ä–∏–≤–µ—Ç!üëã \n–ù–∞–ø–∏—à–∏ –§–ò–û —Ä–µ–±–µ–Ω–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω–∫—É—Ä—Å–µ! üèÜ")
    await state.set_state(Form.waiting_for_fio)


@dp.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã. ‚ùå")
        return

    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ /start.")
    logger.info(f"User {message.from_user.full_name} (ID: {message.from_user.id}) has cancelled the action.")


@dp.message(Form.waiting_for_fio)
async def process_fio(message: Message, state: FSMContext):
    if message.text:
        fio = message.text.strip().title().replace(" ", "_")
        await state.update_data(fio=fio)
        await message.answer(f"–°–ø–∞—Å–∏–±–æ, —è –∑–∞–ø–∏—Å–∞–ª –§–ò–û! ‚úçÔ∏è \n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ üìπ. \n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –æ—Ç–ø—Ä–∞–≤—å /cancel.")
        await state.set_state(Form.waiting_for_photo)
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –§–ò–û. ‚ö†Ô∏è \n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.")


@dp.message(Form.waiting_for_photo)
async def process_file(message: Message, state: FSMContext):
    if message.photo:
        data = await state.get_data()
        fio = data.get("fio", "unknown")

        photo_file = await bot.get_file(message.photo[-1].file_id)
        file_extension = photo_file.file_path.split('.')[-1]
        photo_path = f"photos/{fio}.{file_extension}"

        os.makedirs("photos", exist_ok=True)

        await bot.download_file(photo_file.file_path, photo_path)
        await message.answer("üëè –û—Ç–ª–∏—á–Ω–æ! üíæ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        logger.info(f"Photo saved: {photo_path}")

        await state.clear()
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–Ω–µ —Ñ–∞–π–ª–æ–º). ‚ö†Ô∏è \n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.")


@dp.errors()
async def errors_handler(update: types.Update, exception: Exception):
    logger.error(f"Error in update {update}: {exception}", exc_info=True)
    return True


@dp.message()
async def handle_any(message: Message):
    await message.answer("–Ø —Å–∞–º—ã–π –∫—Ä—É—Ç–æ–π –≤ –º–∏—Ä–µ –±–æ—Ç! üòé\n"
                         "–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª–∏ –¥–ª—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ —à–∫–æ–ª—ã KIBERone.\n"
                         "–Ø –ø–æ–º–æ–≥–∞—é —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–Ω–∫—É—Ä—Å–∞! –î–∞–≤–∞–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è! üèÜ\n"
                         "–î–ª—è —É—á–∞—Å—Ç–∏—è/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /start")


async def main():
    logger.info("Bot started!")
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_my_commands(commands)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped!")
        exit(0)
    except Exception as e:
        logger.critical(f"Bot stopped with error: {e}", exc_info=True)
        exit(1)
